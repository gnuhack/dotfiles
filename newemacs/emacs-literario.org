* Qué está pasando
** DONE Encontrar una forma de poner los #+BEGIN_SRC emacs-lisp #+END_SRC de forma automática: Se hace con <s y luego TAB (En versiones recientes de Emacs es con C-c C-,)
** TODO Poner las funciones de elisp en un fichero aparte
Lo que estoy haciendo aquí es usar la programación literaria. Para ello creo que se usa "tangle" o algo así para cargar desde el archivo de inicio de emacs tradicional (el init.el) un archivo org (emacs-literario.org) que luego automágicamente se convierte en un emacs-literario.el. A partir de ahí ya se lee la configuración normal, solo que en vez de estar toda "del tirón" está en bloques (#+BEGIN_SRC emacs-lisp #+END_SRC) que son leídos y transformados adecuadamente para cargarse. Por tanto para replicar esta configuración se necesitan tener dos archivos (init.el y emacs-literario.org) y los dos en el mismo directorio (típicamente ~/.emacs.d).
* Inicio de paquetería y autoinstalación
(Creo que esta sección entera tendría que moverla a init.el). La primera línea arregla el bug que no permite conectarse a ELPA. Luego en package list meto los paquetes que quiero que se autoninstalen al lanzar un emacs de serie con este archivo de configuración. Pero creo que ya los añade Customize al init.el, tengo que mirarlo. Por último están los 3 repos que he decidido meter (elpa, melpa y gnu).
#+BEGIN_SRC emacs-lisp

  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
  (setq package-list '(ido magit 2048-game pdf-tools elfeed emms htmlize))

  (setq package-archives '(("elpa" . "http://tromey.com/elpa/")
			   ("gnu" . "http://elpa.gnu.org/packages/")
			   ("melpa" . "https://melpa.org/packages/")
			   ))
#+END_SRC

Aquí realizo la instalación de paquetes seleccionados en package-list arriba. En realidad esto lo tengo duplicado, ya que para que funcione lo he tenido que meter en el init.el.
#+BEGIN_SRC 


  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  (dolist (package package-list)
    (unless (package-installed-p package)
      (package-install package)))

#+END_SRC
* Entorno del editor
El which-key te enseña las combinaciones de teclas posibles al pulsar alguna. Con company se autocompletan palabras.
  #+begin_src emacs-lisp
(which-key-mode)
(add-hook 'after-init-hook 'global-company-mode)  
(setq company-show-numbers t)
(setq company-minimum-prefix-length 2)
(setq company-tooltip-align-annotations t)
#+end_src
Como motor de búsqueda he elegido ido, para buscar archivos fácilmente.
#+begin_src emacs-lisp
    ;; https://www.masteringemacs.org/article/introduction-to-ido-mode
    (ido-mode)
    (setq ido-everywhere t)
    (setq ido-enable-flex-matching t)
#+end_src
El winner-mode sirve para poder hacer y deshacer la configuración de ventanas.
#+begin_src emacs-lisp
    ;; Con C-c <flechas> se hace o deshace la config de ventanas
    (winner-mode)
#+end_src
Pequeños ajustes visuales, creación de carpeta backup para guardar los archivos de recuperación que crea emacs, e inicio del servidor para poder acceder a emacs de forma rápida con emacsclient.
#+begin_src emacs-lisp
;; Poner los backups en la carpeta backup 
(setq backup-directory-alist '(("." . "~/.emacs.d/backup")))
(column-number-mode 1)
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
(global-visual-line-mode)

(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(load-theme 'misterioso)

(setq inhibit-splash-screen t)

(server-start)
(setq confirm-kill-emacs 'y-or-n-p)

#+end_src
Para poder sincronizar sin problema mis archivos con el cliente de Nextcloud que tengo, habilito el revert mode de forma automática para que se actualicen los búferes solos.
#+BEGIN_SRC emacs-lisp

(auto-revert-mode)

#+END_SRC
Insertar el cierre de paréntesis de forma automática
#+begin_src emacs-lisp
(electric-pair-mode)
#+end_src
* Eshell
La eshell es una shell escrita entera en lisp.
#+begin_src emacs-lisp
;; Para usar sudo bien en eshell (alias actualizar)
(require 'em-tramp) 

(defun sudeame ()
"Use TRAMP to `sudo' the current buffer"
(interactive)
(when buffer-file-name
(find-alternate-file
(concat "/sudo:root@localhost:"
	buffer-file-name))))
#+end_src
* Tramp
Tramp sirve para acceder de forma remota a archivos a través de emacs con ssh, sftp, etc.
#+begin_src emacs-lisp
  ;;ssh
  ;;Configuración por defecto para acceder a la raspi con "/-::"
  ;;a través de TRAMP
  ;; (custom-set-variables
  ;;            '(tramp-default-method "ssh")
  ;;            '(tramp-default-user "pi")
  ;;            '(tramp-default-host "192.168.1.125"))

#+end_src
* Dired
El navegador de archivos de emacs.
#+begin_src emacs-lisp

  (setq dired-listing-switches "-alh")
(setq dired-isearch-filenames t) ;;Buscar en dired solo en los nombres.
#+end_src
* Puesta de sol
Pongo aquí una función que me permite leer las coordenadas en las que me encuentro para poder ver la puesta de sol con (sunrise-sunset).
#+BEGIN_SRC emacs-lisp
;;(global-linum-mode '0)
    ;;Puesta de sol
    (defun eval-file (file)
      "Execute FILE and return the result of the last expression."
      (eval
       (ignore-errors
	 (read-from-whole-string
	  (with-temp-buffer
	    (insert-file-contents file)
	    (buffer-string))))))

    (setq calendar-latitude (eval-file "~/Plantillas/lat.el"))
    (setq calendar-longitude (eval-file "~/Plantillas/lon.el"))
#+END_SRC
* Org
Asignaciones de teclas sugeridas por el manual de org de info.
#+BEGIN_SRC emacs-lisp

     (global-set-key "\C-cl" 'org-store-link)
     (global-set-key "\C-ca" 'org-agenda)
     (global-set-key "\C-cc" 'org-capture)
     (global-set-key "\C-cb" 'org-switchb)
#+END_SRC
Setup del refile patrocinado por: https://sachachua.com/blog/2015/02/learn-take-notes-efficiently-org-mode/. Aquí defino las plantillas para org. Si tomo una nota que no cuadra con ninguna categoría uso el template de "Nota" y luego hago el refill (C-w).
#+BEGIN_SRC  emacs-lisp

  (setq org-refile-targets '((org-agenda-files . (:maxlevel . 6))))
  (global-set-key "\C-cc" 'org-capture)
  (setq org-capture-templates
	(quote
	 (("c" "Nota" entry
	   (file+datetree "/home/carlos/Nextcloud/Documents/horario.txt")
	   "* %?" :empty-lines 1)
	  ("t" "Todo" entry
	   (file+headline "/home/carlos/org/gtd.org" "Tasks")
	   "* TODO %?" :empty-lines 1)
	  ("j" "Journal Entry" entry
	   (file+datetree "~/Nextcloud/journal/journal.org")
	   "* %?" :empty-lines 1)
	  ("p" "Películas" entry
	   (file+headline "~/Nextcloud/Documents/horario.txt" "Películas")
	   "* %?")
	  ("d" "Dudas" entry (file+headline "/home/carlos/Nextcloud/Documents/horario.txt" "Dudas")
	   "* %^{PROMPT} %?\n  %i\n  %a")
	  ("k" "Cita" entry
	   (file+headline "~/org/uni.org" "Citas")
	   "* %^t %?"))))
  (setq org-agenda-span 'day)
    ;;calendario

    (setq calendar-week-start-day 1)

#+END_SRC
* Notificaciones
Funciones para que las notificaciones de la agenda me lleguen al escritorio con espeak. Además del código de abajo hace falta meter en ~/bin un appt-notification con lo siguiente:
#+BEGIN_SRC 
#!/bin/sh

TIME="$1"
MSG="$2"

notify-send -t 0 "Appointment in $TIME minutes:$MSG"
espeak "Appointment in $TIME minutes: $MSG"

#+END_SRC
Aquí están las funciones para la notificación.
#+BEGIN_SRC emacs-lisp
(require 'appt)
(appt-activate t)

(setq appt-message-warning-time 30) ; Show notification 30 minutes before event
(setq appt-display-interval appt-message-warning-time) ; Disable multiple reminders
(setq appt-display-mode-line nil)

; Use appointment data from org-mode
(defun my-org-agenda-to-appt ()
  (interactive)
  (setq appt-time-msg-list nil)
  (org-agenda-to-appt))

; Update alarms when...
; (1) ... Starting Emacs
(my-org-agenda-to-appt)

; (2) ... Everyday at 12:05am (useful in case you keep Emacs always on)
(run-at-time "12:05am" (* 24 3600) 'my-org-agenda-to-appt)

; (3) ... When TODO.txt is saved
(add-hook 'after-save-hook
          '(lambda ()
             (if (string= (buffer-file-name) (concat (getenv "HOME") "/ideas/TODO.txt"))
                 (my-org-agenda-to-appt))))

; Display appointments as a window manager notification
(setq appt-disp-window-function 'my-appt-display)
(setq appt-delete-window-function (lambda () t))

(setq my-appt-notification-app (concat (getenv "HOME") "/bin/appt-notification"))

(defun my-appt-display (min-to-app new-time msg)
  (if (atom min-to-app)
    (start-process "my-appt-notification-app" nil my-appt-notification-app min-to-app msg)
  (dolist (i (number-sequence 0 (1- (length min-to-app))))
    (start-process "my-appt-notification-app" nil my-appt-notification-app (nth i min-to-app) (nth i msg)))))
#+END_SRC
* PDF
Macro para poner el modo noche en los pdfs (modonoche) y funciones para conseguir un marcapáginas en un pdf. Sacado de https://sachachua.com/blog/2021/02/guest-post-bookmarking-pdfs-in-emacs-with-pdf-tools-and-registers/
#+BEGIN_SRC emacs-lisp

  (fset 'modonoche
	(lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("m" 0 "%d")) arg)))
  (add-hook 'pdf-view-mode-hook (lambda() (nlinum-mode -1))) ;;Desactivar linum mode, que no va bien con pdf-view-mode
  (pdf-tools-install)

  (define-key pdf-view-mode-map (kbd "<C-f1>")
    (lambda ()
      "Saves the current position on the pdf to jump to later with <C-f2>."
      (interactive)
      (setf my-bookmark (pdf-view-bookmark-make-record))))

  (define-key pdf-view-mode-map (kbd "<C-f2>")
    (lambda ()
      "Loads the position saved by <C-f1>."
      (interactive)
      (pdf-view-bookmark-jump my-bookmark)))

#+END_SRC
* Elfeed
Con elfeed puedo tener mi propio feed personalizado. Sobre todo es útil para seguir blogs individuales que no tengan una alta frecuencia de posteo. También me sirve para "suscribirme" a canales de Youtube sin visitar la página, gracias as la función definida abajo.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x w") 'elfeed)
(setq elfeed-feeds
 (quote
  ("https://videos.lukesmith.xyz/feeds/videos.xml?sort=-publishedAt&filter=local"
   ("https://www.youtube.com/feeds/videos.xml?channel_id=UCaifrB5IrvGNPJmPeVOcqBA" Kruggsmash)
   ("https://www.bay12games.com/dwarves/dev_now.rss" Dwarf Fortress)
   "https://www.youtube.com/feeds/videos.xml?channel_id=UCD6VugMZKRhSyzWEWA9W2fg"
   "https://www.youtube.com/feeds/videos.xml?channel_id=UC2eYFnH61tmytImy1mTYvhA"
   "https://www.youtube.com/channel/UCaifrB5IrvGNPJmPeVOcqBA"
   "https://www.youtube.com/user/SsethTzeentach"
   "http://planet.emacs-es.org/rss20.xml"
   "https://planet.emacslife.com/atom.xml"
   "https://blog.mobian-project.org/index.xml"
   "https://twobithistory.org/feed.xml")))
#+END_SRC
Con la siguiente función puedo reproducir vídeos de Youtube en mpv descargándolos con youtube-dl. Solo hay que ponerse sobre el link de Youtube y hacer =M-x std::elfeed::visit-entry-dwim=
#+BEGIN_SRC emacs-lisp

(defun std::elfeed::visit-entry-dwim (&optional arg)
  "Función para reproducir vídeos en elfeed de Youtube con mpv ARG."
  (interactive "P")
  (if arg
      (elfeed-search-browse-url)
    (-let [entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single))]
      (if (s-matches? (rx "https://www.youtube.com/watch" (1+ any))
                      (elfeed-entry-link entry))
          (let* ((quality (completing-read "Max height resolution (0 for unlimited): " '("0" "480" "720" "1080")))
                 (format (if (= 0 (string-to-number quality)) "" (format "--ytdl-format=[height<=?%s]" quality))))
            (message "Opening %s with height ≤ %s with mpv..."
                     (elfeed-entry-link entry) quality)
            (elfeed-untag entry 'unread)
            (start-process "elfeed-mpv" nil "mpv" format (elfeed-entry-link entry))
            (elfeed-search-update :force))
        (if (eq major-mode 'elfeed-search-mode)
            (elfeed-search-browse-url)
          (elfeed-show-visit))))))
#+END_SRC
* EMMS
Para reproducir música he elegido emms, que es bastante simple de configurar. Simplemente hay que añadir a la lista de reproducción la carpeta de música que quiera reproducir (con add-directory-tree) y luego ya iniciarlo con emms-start.
#+BEGIN_SRC emacs-lisp
  ;;emms
  (require 'emms-setup)
  (emms-all)
  (emms-default-players)
  (setq emms-source-file-default-directory "~/Música/")
  (emms-add-directory-tree "~/Música")
  (emms-mode-line-disable)
  (global-set-key (kbd "<XF86AudioPrev>") 'emms-previous)
  (global-set-key (kbd "<XF86AudioNext>") 'emms-next)
  (global-set-key (kbd "<XF86AudioPlay>") 'emms-pause)
  (global-set-key (kbd "<XF86MonBrightnessUp>") 'emms-shuffle) 
  (global-set-key (kbd "s-m") 'emms)
  (add-hook 'emms-mode-hook 'hl-line-mode)
  (add-hook 'emms-mode-hook 'visual-line-mode)

#+END_SRC
* Keybindings
Atajos de teclas y registros.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x p") 'proced)
  (global-set-key (kbd "C-x e") 'eshell)
  (global-set-key (kbd "C-c m") 'calendar)
  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key (kbd "s-o") 'other-window)
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
  (global-set-key (kbd "<f5>") 'modonoche)
  (add-to-list 'org-file-apps '("pdf" . "evince %s"))
  (global-set-key (kbd "<f6>") 'quick-calc)
  (set-register ?o (cons 'file "/home/carlos/Nextcloud/Documents/horario.txt"))
  (set-register ?e (cons 'file "/home/carlos/git/dotfiles/newemacs/emacs-literario.org"))
  (set-register ?t (cons 'file "/home/carlos/Nextcloud/Talk/orgt430/tiempo.org"))
    (global-set-key (kbd "s-n") 'next-buffer)
    (global-set-key (kbd "s-p") 'previous-buffer)
#+END_SRC
* Projectile
Para gestionar proyectos he elegido proyectile. Así puedo cambiar entre archivos de un proyecto de forma fácil y cómoda. Un proyecto es toda carpeta que contenga archivos clave (como los repos de git).
#+BEGIN_SRC emacs-lisp
(projectile-mode +1)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+END_SRC
* Guardado
Guarda el estado de un búfer cuando se cierra éste o Emacs.
#+BEGIN_SRC emacs-lisp
(save-place-mode 1)
#+END_SRC
