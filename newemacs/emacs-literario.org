* Qué está pasando
** DONE Encontrar una forma de poner los #+BEGIN_SRC emacs-lisp #+END_SRC de forma automática: Se hace con <s y luego TAB
Lo que estoy haciendo aquí es usar la programación literaria. Para ello creo que se usa "tangle" o algo así para cargar desde el archivo de inicio de emacs tradicional (el init.el) un archivo org (emacs-literario.org) que luego automágicamente se convierte en un emacs-literario.el. A partir de ahí ya se lee la configuración normal, solo que en vez de estar toda "del tirón" está en bloques (#+BEGIN_SRC emacs-lisp #+END_SRC) que son leídos y transformados adecuadamente para cargarse. Por tanto para replicar esta configuración se necesitan tener dos archivos (init.el y emacs-literario.org) y los dos en el mismo directorio (típicamente ~/.emacs.d).
* Inicio de paquetería y autoinstalación
#+BEGIN_SRC emacs-lisp
    ;; This is only needed once, near the top of the file
    ;; (eval-when-compile
    ;;   ;; Following line is not needed if use-package.el is in ~/.emacs.d
    ;;   (add-to-list 'load-path "~/emacs.d/elpa")
    ;;   (require 'use-package))

  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
  (setq package-list '(ido magit 2048-game pdf-tools elfeed emms htmlize))

  (setq package-archives '(("elpa" . "http://tromey.com/elpa/")
			   ("gnu" . "http://elpa.gnu.org/packages/")
			   ("melpa" . "https://melpa.org/packages/")
			   ))

					  ; activate all the packages (in particular autoloads)
  (package-initialize)

					  ; fetch the list of packages available 
  (unless package-archive-contents
    (package-refresh-contents))

					  ; install the missing packages
  (dolist (package package-list)
    (unless (package-installed-p package)
      (package-install package)))

#+END_SRC
* Tolodemás

#+BEGIN_SRC emacs-lisp
  (setq dired-listing-switches "-alh")
  ;;ssh
  ;;Configuración por defecto para acceder a la raspi con "/-::"
  ;;a través de TRAMP
  ;; (custom-set-variables
  ;;            '(tramp-default-method "ssh")
  ;;            '(tramp-default-user "pi")
  ;;            '(tramp-default-host "192.168.1.125"))

    ;; https://www.masteringemacs.org/article/introduction-to-ido-mode
    (ido-mode)

    ;; Con C-c <flechas> se hace o deshace la config de ventanas
    (winner-mode)

    (global-visual-line-mode)


    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (load-theme 'misterioso)

    (setq inhibit-splash-screen t)

    (server-start)
    (setq confirm-kill-emacs 'y-or-n-p)
    (setq dired-isearch-filenames t) ;;Buscar en dired solo en los nombres.
    ;;Puesta de sol
    (defun eval-file (file)
      "Execute FILE and return the result of the last expression."
      (eval
       (ignore-errors
	 (read-from-whole-string
	  (with-temp-buffer
	    (insert-file-contents file)
	    (buffer-string))))))

    (setq calendar-latitude (eval-file "~/Plantillas/lat.el"))
    (setq calendar-longitude (eval-file "~/Plantillas/lon.el"))
    ;;calendario

    (setq calendar-week-start-day 1)
  ;;misc
  (server-start)
  (setq confirm-kill-emacs 'y-or-n-p)
  (setq dired-isearch-filenames t) ;;Buscar en dired solo en los nombres.
  ;;Puesta de sol
  (defun eval-file (file)
    "Execute FILE and return the result of the last expression."
    (eval
     (ignore-errors
       (read-from-whole-string
	(with-temp-buffer
	  (insert-file-contents file)
	  (buffer-string))))))

  (setq calendar-latitude (eval-file "~/Plantillas/lat.el"))
  (setq calendar-longitude (eval-file "~/Plantillas/lon.el"))
  ;;calendario
  (setq calendar-week-start-day 1)
#+END_SRC
* Org
#+BEGIN_SRC emacs-lisp

     (global-set-key "\C-cl" 'org-store-link)
     (global-set-key "\C-ca" 'org-agenda)
     (global-set-key "\C-cc" 'org-capture)
     (global-set-key "\C-cb" 'org-switchb)

  ;;Setup del refile patrocinado por:
  ;;https://sachachua.com/blog/2015/02/learn-take-notes-efficiently-org-mode/
  (setq org-refile-targets '((org-agenda-files . (:maxlevel . 6))))
  (global-set-key "\C-cc" 'org-capture)
  (setq org-capture-templates
	(quote
	 (("c" "Nota" entry
	   (file+datetree "/home/carlos/Nextcloud/Documents/horario.txt")
	   "* %?" :empty-lines 1)
	  ("t" "Todo" entry
	   (file+headline "/home/carlos/org/gtd.org" "Tasks")
	   "* TODO %?" :empty-lines 1)
	  ("j" "Journal Entry" entry
	   (file+datetree "~/Nextcloud/journal/journal.org")
	   "* %?" :empty-lines 1)
	  ("p" "Películas" entry
	   (file+headline "~/home/carlos/Nextcloud/Documents/horario.txt" "Películas")
	   "* %?")
	  ("d" "Dudas" entry (file+headline "/home/carlos/Nextcloud/Documents/horario.txt" "Dudas")
	   "* %^{PROMPT} %?\n  %i\n  %a")
	  ("k" "Cita" entry
	   (file+headline "~/org/uni.org" "Citas")
	   "* %^t %?"))))
  (setq org-agenda-span 'day)


#+END_SRC
* Notificaciones
#+BEGIN_SRC emacs-lisp
(require 'appt)
(appt-activate t)

(setq appt-message-warning-time 30) ; Show notification 30 minutes before event
(setq appt-display-interval appt-message-warning-time) ; Disable multiple reminders
(setq appt-display-mode-line nil)

; Use appointment data from org-mode
(defun my-org-agenda-to-appt ()
  (interactive)
  (setq appt-time-msg-list nil)
  (org-agenda-to-appt))

; Update alarms when...
; (1) ... Starting Emacs
(my-org-agenda-to-appt)

; (2) ... Everyday at 12:05am (useful in case you keep Emacs always on)
(run-at-time "12:05am" (* 24 3600) 'my-org-agenda-to-appt)

; (3) ... When TODO.txt is saved
(add-hook 'after-save-hook
          '(lambda ()
             (if (string= (buffer-file-name) (concat (getenv "HOME") "/ideas/TODO.txt"))
                 (my-org-agenda-to-appt))))

; Display appointments as a window manager notification
(setq appt-disp-window-function 'my-appt-display)
(setq appt-delete-window-function (lambda () t))

(setq my-appt-notification-app (concat (getenv "HOME") "/bin/appt-notification"))

(defun my-appt-display (min-to-app new-time msg)
  (if (atom min-to-app)
    (start-process "my-appt-notification-app" nil my-appt-notification-app min-to-app msg)
  (dolist (i (number-sequence 0 (1- (length min-to-app))))
    (start-process "my-appt-notification-app" nil my-appt-notification-app (nth i min-to-app) (nth i msg)))))
#+END_SRC
* PDF
#+BEGIN_SRC emacs-lisp

  (fset 'modonoche
	(lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("m" 0 "%d")) arg))) ;; Macro para poner el modo noche en los pdfs.
  (add-hook 'pdf-view-mode-hook (lambda() (nlinum-mode -1))) ;;Desactivar linum mode, que no va bien con pdf-view-mode
  (pdf-tools-install)
  ;;Guardar la posición en un pdf: "marcapáginas"
  ;;Sacado de https://sachachua.com/blog/2021/02/guest-post-bookmarking-pdfs-in-emacs-with-pdf-tools-and-registers/
  (define-key pdf-view-mode-map (kbd "<C-f1>")
    (lambda ()
      "Saves the current position on the pdf to jump to later with <C-f2>."
      (interactive)
      (setf my-bookmark (pdf-view-bookmark-make-record))))

  (define-key pdf-view-mode-map (kbd "<C-f2>")
    (lambda ()
      "Loads the position saved by <C-f1>."
      (interactive)
      (pdf-view-bookmark-jump my-bookmark)))

#+END_SRC
* Elfeed
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x w") 'elfeed)
(setq elfeed-feeds
 (quote
  ("https://videos.lukesmith.xyz/feeds/videos.xml?sort=-publishedAt&filter=local"
   ("https://www.youtube.com/feeds/videos.xml?channel_id=UCaifrB5IrvGNPJmPeVOcqBA" Kruggsmash)
   ("https://www.bay12games.com/dwarves/dev_now.rss" Dwarf Fortress)
   "https://www.youtube.com/feeds/videos.xml?channel_id=UCD6VugMZKRhSyzWEWA9W2fg"
   "https://www.youtube.com/feeds/videos.xml?channel_id=UC2eYFnH61tmytImy1mTYvhA"
   "https://www.youtube.com/channel/UCaifrB5IrvGNPJmPeVOcqBA"
   "https://www.youtube.com/user/SsethTzeentach"
   "https://www.youtube.com/user/vicesat"
   "http://planet.emacs-es.org/rss20.xml"
   "https://planet.emacslife.com/atom.xml"
   "https://blog.mobian-project.org/index.xml"
   "https://twobithistory.org/feed.xml")))
;;Ver vídeos

(defun std::elfeed::visit-entry-dwim (&optional arg)
  "Función para reproducir vídeos en elfeed de Youtube con mpv ARG."
  (interactive "P")
  (if arg
      (elfeed-search-browse-url)
    (-let [entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single))]
      (if (s-matches? (rx "https://www.youtube.com/watch" (1+ any))
                      (elfeed-entry-link entry))
          (let* ((quality (completing-read "Max height resolution (0 for unlimited): " '("0" "480" "720" "1080")))
                 (format (if (= 0 (string-to-number quality)) "" (format "--ytdl-format=[height<=?%s]" quality))))
            (message "Opening %s with height ≤ %s with mpv..."
                     (elfeed-entry-link entry) quality)
            (elfeed-untag entry 'unread)
            (start-process "elfeed-mpv" nil "mpv" format (elfeed-entry-link entry))
            (elfeed-search-update :force))
        (if (eq major-mode 'elfeed-search-mode)
            (elfeed-search-browse-url)
          (elfeed-show-visit))))))
#+END_SRC
* EMMS
#+BEGIN_SRC emacs-lisp
  ;;emms
  (require 'emms-setup)
  (emms-all)
  (emms-default-players)
  (setq emms-source-file-default-directory "~/Música/")
  (global-set-key (kbd "<XF86AudioPrev>") 'emms-previous)
  (global-set-key (kbd "<XF86AudioNext>") 'emms-next)
  (global-set-key (kbd "<XF86AudioPlay>") 'emms-pause)
  (global-set-key (kbd "<XF86AudioStop>") 'emms-shuffle)

#+END_SRC
* Keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c m") 'calendar)
  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
  (global-set-key (kbd "<f5>") 'modonoche)
  (add-to-list 'org-file-apps '("pdf" . "evince %s"))
  (global-set-key (kbd "<f6>") 'quick-calc)
  (set-register ?o (cons 'file "/home/carlos/Nextcloud/Documents/horario.txt"))
  (set-register ?e (cons 'file "/home/carlos/git/dotfiles/emacs.el"))
  (set-register ?t (cons 'file "/home/carlos/Nextcloud/Talk/orgt430/tiempo.org"))
    (global-set-key (kbd "s-n") 'next-buffer)
    (global-set-key (kbd "s-p") 'previous-buffer)
#+END_SRC
