* Use package
#+BEGIN_SRC emacs-lisp
  ;; This is only needed once, near the top of the file
  (eval-when-compile
    ;; Following line is not needed if use-package.el is in ~/.emacs.d
    (add-to-list 'load-path "~/emacs.d/elpa")
    (require 'use-package))

#+END_SRC
* Repositorios
#+begin_src emacs-lisp
  (require 'package)
  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                      (not (gnutls-available-p))))
         (proto (if no-ssl "http" "https")))
    (when no-ssl
          (warn "\
  Your version of Emacs does not support SSL connections,
  which is unsafe because it allows man-in-the-middle attacks.
  There are two things you can do about this warning:
  1. Install an Emacs version that does support SSL and be safe.
  2. Remove this warning from your init file so you won't see it again."))
    ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
    (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
    ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
    (when (< emacs-major-version 24)
      ;; For important compatibility libraries like cl-lib
      (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))
  (package-initialize)
#+end_src
* Org mode
#+begin_src emacs-lisp

  (require 'org);;Config para org mode

  (setq org-default-notes-file (concat org-directory "/notes.org"))
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cb" 'org-iswitchb)
  (define-key global-map "\C-ca" 'org-agenda)

  ;;Plantilla para efectivo
  (setq org-capture-templates

	'(    ;; ... other templates
	      ("c" "Nota" entry
	(file+datetree "~/Documentos/journal/notas.org")
	"* %?" :empty-lines 1)


      ("j" "Journal Entry"
	   entry (file+datetree "~/Documentos/journal/journal.org")
	   "* %?"
	   :empty-lines 1)
       ))



  ;;(define-key global-map "\C-cl" 'org-capture)

  ;; Alarma para citas de org-mode

  (require 'appt)
  (appt-activate t)

  (setq appt-message-warning-time 60) ; Show notification 60 minutes before event
  (setq appt-display-interval appt-message-warning-time) ; Disable multiple reminders
  (setq appt-display-mode-line nil)

  ; Use appointment data from org-mode
  (defun my-org-agenda-to-appt ()
    (interactive)
    (setq appt-time-msg-list nil)
    (org-agenda-to-appt))

  ; Update alarms when...
  ; (1) ... Starting Emacs
  (my-org-agenda-to-appt)

  ; (2) ... Everyday at 12:05am (useful in case you keep Emacs always on)
  (run-at-time "12:05am" (* 24 3600) 'my-org-agenda-to-appt)

  ; (3) ... When TODO.txt is saved
  (add-hook 'after-save-hook
	    '(lambda ()
	       (if (string= (buffer-file-name) (concat (getenv "HOME") "/ideas/TODO.txt"))
		   (my-org-agenda-to-appt))))

  ; Display appointments as a window manager notification
  (setq appt-disp-window-function 'my-appt-display)
  (setq appt-delete-window-function (lambda () t))

  (setq my-appt-notification-app (concat (getenv "HOME") "/bin/appt-notification"))

  (defun my-appt-display (min-to-app new-time msg)
    (if (atom min-to-app)
      (start-process "my-appt-notification-app" nil my-appt-notification-app min-to-app msg)
    (dolist (i (number-sequence 0 (1- (length min-to-app))))
      (start-process "my-appt-notification-app" nil my-appt-notification-app (nth i min-to-app) (nth i msg)))))


  ;; Fin de alarma para citas
  ;;bullets para org
  (use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (setq org-log-done t)
  (setq org-agenda-files (list "~/org/uni.org"))
#+end_src
* Cajón de sastre
#+begin_src emacs-lisp
    ;;Estadísticas de teclas pulsadas
    (use-package keyfreq
    :ensure t
    :config
    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1))

    (setq confirm-kill-emacs 'y-or-n-p) ;; Pedir confirmación para salir de emacs

    (setq desktop-save-mode t) ;; guardar la sessión al cerrar emacs y restaurarla

    (desktop-save-mode 1) ;; guardar sesión emacs

    ;; Tell emacs where is your personal elisp lib dir
    (add-to-list 'load-path "~/.emacs.d/lisp/")

    ;;Ver el tiempo con wttrin
    (setq wttrin-default-accept-language '("Accept-Language" . "es-ES"))
    (setq wttrin-default-cities '("Mairena" "mairena" "Sevilla"))
    ;;(yahoo-weather-mode)

    ;;Asignacion de teclas para sokoban en el modo socoban, pero no me sale
    (eval-after-load 'sokoban-mode
      '(local-set-key (kbd "k") 'sokoban-move-up))
    ;;macro para asignar las teclas en socoban
    (fset 'teclasokoban
       [menu ?l ?o ?c ?a ?l ?  ?s ?e ?t ?  ?k ?e ?y return ?k ?s ?o ?k ?o ?b ?a ?n ?  ?m ?o ?v ?e ?  ?p backspace ?u ?p return menu ?l ?o ?c ?a ?l ?  ?s ?e ?t ?  ?k ?e ?y return ?j ?s ?o ?k ?o ?b ?a ?n ?  ?m ?o ?v ?e ?  ?d ?o ?w ?n return menu ?l ?o ?c ?a ?l ?  ?s ?e ?t ?  ?k ?e ?y return ?h ?s ?o ?k ?o ?b ?a ?n ?  ?m ?o ?v ?e ?  ?l ?e ?f ?t return menu ?l ?o ?c ?a ?l ?  ?s ?e ?t ?  ?k ?e ?y return ?l ?s ?o ?k ?o ?b ?a ?n ?  ?m ?o ?v ?e ?  ?r ?i ?g ?h ?t return])
    ;;f1 para usar la macro
    (global-set-key (kbd "<f1>") 'teclasokoban)

    ;;quitar los archivos ~
    (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+end_src
* Comentarios
#+begin_src emacs-lisp
  ;;(define-key c-mode-map  "\C-ñ" 'compile)
  ;;(global-set-key (kbd "C-ñ") 'eval-buffer)

  ;; cargamos el diccionario con sus atajos de teclado
  ;; (load "define-word")

  ;; (global-set-key (kbd "C-c D") 'define-word-at-point)
  ;; (global-set-key (kbd "C-c d") 'define-word)

#+end_src

* Keybindings
#+begin_src emacs-lisp

  ;;Ponemos M-o para cambiar de búfer cuando hay varios abiertos

  (define-key elfeed-show-mode-map (kbd "C-c o") 'elfeed-visit-or-play-with-mpv)
  (global-set-key (kbd "C-ñ") 'other-window)
  (global-set-key (kbd"M-o") 'mode-line-other-buffer)
  (global-set-key (kbd "<f7>") 'bookmark-jump)
  (global-set-key (kbd "<f6>") 'bookmark-set)
  (global-set-key (kbd "<f12>") 'delete-other-windows)
  (global-set-key (kbd "<f2>") 'quick-calc)
  (global-set-key (kbd "M-p") 'next-buffer)
  (global-set-key (kbd "M-n") 'previous-buffer)
  (global-set-key (kbd "<f3>") 'modonoche)
  (global-set-key (kbd "<f8>") 'next-buffer)
  (global-set-key (kbd "<f9>") 'previous-buffer)
  (global-set-key (kbd "<f5>") 'compilacion)
  (global-set-key (kbd "C-c m c") 'mc/edit-lines)
  (bind-key "M-N"  'kb-scroll-up-hold-cursor)
  (bind-key "M-P"  'kb-scroll-down-hold-cursor)
  (global-set-key (kbd "C-x k") 'kill-this-buffer)
  (global-set-key (kbd "C-c d") 'define-word)


#+end_src
* Edición de texto
#+begin_src emacs-lisp
  ;;Tree mode
  (use-package undo-tree
    :diminish undo-tree-mode
    :config
    (progn
      (global-undo-tree-mode)
      (setq undo-tree-visualizer-timestamps t)
      (setq undo-tree-visualizer-diff t)))

  (server-start)
  (ido-mode 1)
  (setq ido-everywhere t)
  (setq ido-enable-flex-matching t)

  ;;Ponemos los mensajes que salen en otro búfer en el mismo
  (tooltip-mode -1)
  (setq tooltip-use-echo-area t)


  ;;Configuración para acceder fácil a archivos recientes con recentf

   
  (require 'recentf)

  ;; get rid of `find-file-read-only' and replace it with something
  ;; more useful.
  (global-set-key (kbd "C-x C-r") 'ido-recentf-open)


  ;; enable recent files mode.
  (recentf-mode t)

  ; 50 files ought to be enough.
  (setq recentf-max-saved-items 50)

  (defun ido-recentf-open ()
    "Use `ido-completing-read' to \\[find-file] a recent file"
    (interactive)
    (if (find-file (ido-completing-read "Find recent file: " recentf-list))
        (message "Opening file...")
      (message "Aborting")))

  ;;Mostramos el número de fila para programar mejor

  (add-hook 'prog-mode-hook 'linum-mode)

  ;;Prueba de smooth scrolling
  ;;(setq scroll-conservatively 10000)
  (setq redisplay-dont-pause t
    scroll-margin 1
    scroll-step 1
    scroll-conservatively 10000
    scroll-preserve-screen-position 1)

  ;; Run C programs directly from within emacs
  (defun execute-c-program ()
    (interactive)
    (defvar foo)
    (setq foo (concat "gcc " (buffer-name) " && ./a.out" ))
    (shell-command foo))
   
  (global-set-key [C-f1] 'execute-c-program)

  ;;Prueba para ver si puedo abrir los .m en modo octave automáticamente
  (add-to-list 'auto-mode-alist '("\\.m\\'" . octave-mode))


  ;;Paréntesis inteligentes
  (use-package smartparens
    :ensure t
    :diminish smartparens-mode
    :config
    (progn
      (require 'smartparens-config)
      (smartparens-global-mode 1)
      (show-paren-mode t)))
  ;;Mostramos el núnmero de columna
  (column-number-mode)

  ;;Funciones para deslizar la pantalla sin mover el cursor
  (defun kb-scroll-up-hold-cursor ()
    "Scroll up one position in file."
    (interactive)
    (scroll-up-command 1))

  (defun kb-scroll-down-hold-cursor ()
    "Scroll down one position in file."
    (interactive)
    (scroll-up-command -1))

#+end_src
* Tratamiento de pdfs
#+begin_src emacs-lisp
  ;; a ver si condigo darle definición a los pdfs
  (require 'doc-view)
  (setq doc-view-resolution 144)
  (require 'xscheme)
  (use-package pdf-tools
	:ensure t)
  ;;Modo noche para los pdfs con f1

  (fset 'modonoche
     (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ("m" 0 "%d")) arg)))



#+end_src
* Configuración visual
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src
* Elfeed
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x w") 'elfeed)

  ;;Ver vídeos con mpv
  (defun elfeed-play-with-mpv ()
    "Play entry link with mpv."
    (interactive)
    (let ((entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single)))
	  (quality-arg "")
	  (quality-val (completing-read "Max height resolution (0 for unlimited): " '("0" "480" "720") nil nil)))
      (setq quality-val (string-to-number quality-val))
      (message "Opening %s with height≤%s with mpv..." (elfeed-entry-link entry) quality-val)
      (when (< 0 quality-val)
	(setq quality-arg (format "--ytdl-format=[height<=?%s]" quality-val)))
      (start-process "elfeed-mpv" nil "mpv" quality-arg (elfeed-entry-link entry))))

  (defvar elfeed-mpv-patterns
    '("youtu\\.?be")
    "List of regexp to match against elfeed entry link to know
  whether to use mpv to visit the link.")

  (defun elfeed-visit-or-play-with-mpv ()
    "Play in mpv if entry link matches `elfeed-mpv-patterns', visit otherwise.
  See `elfeed-play-with-mpv'."
    (interactive)
    (let ((entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single)))
	  (patterns elfeed-mpv-patterns))
      (while (and patterns (not (string-match (car elfeed-mpv-patterns) (elfeed-entry-link entry))))
	(setq patterns (cdr patterns)))
      (if patterns
	  (elfeed-play-with-mpv)
	(if (eq major-mode 'elfeed-search-mode)
	    (elfeed-search-browse-url)
	  (elfeed-show-visit)))))
  ;;Fin de ver vídeos con mpv

#+end_src
